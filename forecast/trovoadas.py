from datetime import datetime

def verificar_trovoadas(dados_climaticos):
    """
    Analisa a previs√£o para as pr√≥ximas 24 horas em busca de trovoadas.

    Utiliza os dados fornecidos pela API para identificar tempestades el√©tricas,
    baseando-se nas descri√ß√µes clim√°ticas e na probabilidade de chuva.
    """

    alerta_trovoada = False  # Flag para indicar se foi detectado algum risco

    print("\n‚ö° PREVIS√ÉO DE TROVOADAS (pr√≥ximas 24 horas):")

    # Percorre os 8 primeiros per√≠odos de 3h (totalizando 24h)
    for previsao in dados_climaticos['list'][:8]:
        # Converte o timestamp para data leg√≠vel
        horario_previsto = datetime.fromtimestamp(previsao['dt'])
        horario_formatado = horario_previsto.strftime('%d/%m %H:%M')

        # Obt√©m descri√ß√£o principal e detalhada do tempo
        tempo_principal = previsao['weather'][0]['main']
        descricao_clima = previsao['weather'][0]['description']

        # Converte a probabilidade de precipita√ß√£o para porcentagem
        chance_chuva = previsao['pop'] * 100

        # Verifica se o termo "thunderstorm" aparece na descri√ß√£o principal
        if 'thunderstorm' in tempo_principal.lower():
            alerta_trovoada = True

            # Emite alerta detalhado ao usu√°rio
            print(f"‚ö†Ô∏è ALERTA DE TROVOADA: '{descricao_clima.title()}' previsto para {horario_formatado}")
            print(f"üåßÔ∏è Chance de chuva: {chance_chuva:.0f}%")
            print("-" * 60)

    # Caso nenhuma trovoada tenha sido detectada
    if not alerta_trovoada:
        print("‚úÖ Nenhuma trovoada prevista nas pr√≥ximas 24 horas.")
